// <auto-generated />
using System;
using CoursWork.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoursWork.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoursWork.Models.CheckList", b =>
                {
                    b.Property<int>("CheckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CheckId"));

                    b.Property<int?>("AcceptenceDateOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerId1")
                        .HasColumnType("int");

                    b.Property<int?>("FirstNameCustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("LastNameCustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceivingDateDeliveryId")
                        .HasColumnType("int");

                    b.Property<int?>("TotalDeliveryId")
                        .HasColumnType("int");

                    b.HasKey("CheckId");

                    b.HasIndex("AcceptenceDateOrderId");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("FirstNameCustomerId");

                    b.HasIndex("LastNameCustomerId");

                    b.HasIndex("ReceivingDateDeliveryId");

                    b.HasIndex("TotalDeliveryId");

                    b.ToTable("CheckList");
                });

            modelBuilder.Entity("CoursWork.Models.CourierInfo", b =>
                {
                    b.Property<int>("CourierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourierId"));

                    b.Property<decimal?>("DeliveryPay")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourierId");

                    b.ToTable("CourierInfo");
                });

            modelBuilder.Entity("CoursWork.Models.Customers", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("House")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("CoursWork.Models.DeliveryList", b =>
                {
                    b.Property<int>("DeliveryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryId"));

                    b.Property<int>("CourierId1")
                        .HasColumnType("int");

                    b.Property<int>("OrderId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReceivingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("DeliveryId");

                    b.HasIndex("CourierId1");

                    b.HasIndex("OrderId1");

                    b.ToTable("DeliveryList");
                });

            modelBuilder.Entity("CoursWork.Models.Orders", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("AcceptanceDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId1")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId1");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CoursWork.Models.OrdersProducts", b =>
                {
                    b.Property<int>("OrdersProductsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrdersProductsId"));

                    b.Property<int?>("OrderId1")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId1")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrdersProductsId");

                    b.HasIndex("OrderId1");

                    b.HasIndex("ProductId1");

                    b.ToTable("OrdersProducts");
                });

            modelBuilder.Entity("CoursWork.Models.Products", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CoursWork.Models.CheckList", b =>
                {
                    b.HasOne("CoursWork.Models.Orders", "AcceptenceDate")
                        .WithMany()
                        .HasForeignKey("AcceptenceDateOrderId");

                    b.HasOne("CoursWork.Models.Customers", "CustomerId")
                        .WithMany()
                        .HasForeignKey("CustomerId1");

                    b.HasOne("CoursWork.Models.Customers", "FirstName")
                        .WithMany()
                        .HasForeignKey("FirstNameCustomerId");

                    b.HasOne("CoursWork.Models.Customers", "LastName")
                        .WithMany()
                        .HasForeignKey("LastNameCustomerId");

                    b.HasOne("CoursWork.Models.DeliveryList", "ReceivingDate")
                        .WithMany()
                        .HasForeignKey("ReceivingDateDeliveryId");

                    b.HasOne("CoursWork.Models.DeliveryList", "Total")
                        .WithMany()
                        .HasForeignKey("TotalDeliveryId");

                    b.Navigation("AcceptenceDate");

                    b.Navigation("CustomerId");

                    b.Navigation("FirstName");

                    b.Navigation("LastName");

                    b.Navigation("ReceivingDate");

                    b.Navigation("Total");
                });

            modelBuilder.Entity("CoursWork.Models.DeliveryList", b =>
                {
                    b.HasOne("CoursWork.Models.CourierInfo", "CourierId")
                        .WithMany()
                        .HasForeignKey("CourierId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoursWork.Models.Orders", "OrderId")
                        .WithMany()
                        .HasForeignKey("OrderId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourierId");

                    b.Navigation("OrderId");
                });

            modelBuilder.Entity("CoursWork.Models.Orders", b =>
                {
                    b.HasOne("CoursWork.Models.Customers", "CustomerId")
                        .WithMany()
                        .HasForeignKey("CustomerId1");

                    b.Navigation("CustomerId");
                });

            modelBuilder.Entity("CoursWork.Models.OrdersProducts", b =>
                {
                    b.HasOne("CoursWork.Models.Orders", "OrderId")
                        .WithMany()
                        .HasForeignKey("OrderId1");

                    b.HasOne("CoursWork.Models.Products", "ProductId")
                        .WithMany()
                        .HasForeignKey("ProductId1");

                    b.Navigation("OrderId");

                    b.Navigation("ProductId");
                });
#pragma warning restore 612, 618
        }
    }
}
